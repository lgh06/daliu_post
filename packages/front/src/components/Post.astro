---
// @ts-nocheck
---

<main>
  <div id="progress-container" class="hide">
    <div id="progress-messages"></div>
  </div>
  <div class="line">
    请输入标题<br />
    <textarea name="title" id="title"></textarea>
  </div>
  <div class="line">
    请输入内容 必填 <br />
    <textarea name="content" id="content"></textarea>
  </div>
  <div class="line" style="zoom: .85;margin-top: 1rem;">
    以下选项要看具体的插件是否支持
  </div>
  <div class="line checkboxes" style="zoom: .85;">
    <label>
      <input type="checkbox" name="headless" id="headlesscb" /> 无界面模式
    </label>
  </div>
  <div class="line checkboxes" style="zoom: .85;">
    <label>
      <input type="checkbox" name="autoCommit" id="autoCommitcb" /> 自动提交与发表
    </label>
  </div>
  <div class="line buttons">
    <button style="display:none"></button>
  </div>
</main>

<style scoped lang="scss" is:inline>
  main {
    height: fit-content;
    width: 90%;
    margin: 0 auto;
    font-size: 24px;
  }
  textarea {
    width: 100%;
    display: block;
    margin: 0 auto;
    font-size: 24px;
    line-height: 1.5;
    &#title {
      min-height: 60px;
    }
    &#content {
      min-height: 200px;
    }
  }
  .line.buttons {
    margin-top: 1rem;
    button {
      display: inline-block;
      zoom: 1.2;
      &:not(:nth-of-type(1)):not(:nth-of-type(2)) {
        margin-left: 5px;
      }
    }
  }
  
  #progress-container {
    position: fixed;
    bottom: 30px;
    left: 10%;
    width: 80%;
    height: 50px;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    overflow: hidden;

    opacity: 1;
    &.hide{
      opacity: 0;
    }
  }
  
  #progress-messages {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    transition: all 0.3s linear;
  }
  
  .progress-message {
    padding: 5px 10px;
    color: white;
    font-size: 14px;
  }
</style>
<script>
  // @ts-nocheck
  async function revertTextarea() {
    let eleArr = document.querySelectorAll("textarea,input[type=checkbox]");
    Array.from(eleArr).forEach((ele, i) => {
      let v = localStorage.getItem(`$$${ele.tagName}$$${i}`);
      if (v) {
        if (ele.tagName === "INPUT" && ele.type === "checkbox") {
          ele.checked = v === "true" ? true : false;
        }
        if (ele.tagName === "TEXTAREA") {
          ele.value = v;
        }
      }
    });
  }
  async function main() {
    setTimeout(()=>{
      let buttons = document.querySelectorAll(".line.buttons button");
      console.log("5000 buttons", buttons)
      if(buttons.length <=1){
        window.location.reload()
      }
    }, 5000);
    let providersJsonObj = await fetch("http://localhost:3047/providers").then(
      (res) => res.json(),
    ).catch(r =>{
      setTimeout(()=>{
        window.location.reload()
      },5000)
    });
    console.log(providersJsonObj);
    Object.keys(providersJsonObj).forEach((providerName) => {
      if (providerName.startsWith("__")) return;
      let button = document.createElement("button");
      button.innerText = providersJsonObj[providerName].desc;
      button.onclick = () => {
        let title = document.querySelector("#title").value;
        let content = document.querySelector("#content").value;
        let headless = document.querySelector("#headlesscb").checked;
        let autoCommit = document.querySelector("#autoCommitcb").checked;
        // save textarea value to localStorage
        let eleArr = document.querySelectorAll("textarea,input[type=checkbox]");
        Array.from(eleArr).forEach((ele, i) => {
          let value;
          if (ele.tagName === "INPUT" && ele.type === "checkbox") {
            value = ele.checked;
          }
          if (ele.tagName === "TEXTAREA") {
            value = ele.value;
          }
          localStorage.setItem(`$$${ele.tagName}$$${i}`, value || "");
        });

        fetch(`http://localhost:3047/${providerName}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title,
            content,
            headless,
            autoCommit,
          }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            console.log("Success:", data);
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      };
      document.querySelector(".buttons").appendChild(button);
    });
  }


  main();

  revertTextarea();
</script>
<script>
  // @ts-nocheck
  import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";
  const socket = io("ws://localhost:3047/");
  // 获取消息容器
  const outContainer = document.getElementById('progress-container');
  const container = document.getElementById('progress-messages');

  let lastProgressTime = 0;
  socket.on('progress', (...arg) => {
    lastProgressTime = Date.now();
    outContainer?.classList.remove("hide");

    let last = arg.pop();

    // 创建新消息元素
    const messageElement = document.createElement('div');
    messageElement.className = 'progress-message';
    messageElement.textContent = arg.join(',');
    
    // 将新消息添加到容器顶部
    container?.append(messageElement);
    
  });

  function hideOutContainer(){
    setInterval(() => {
      let now = Date.now();
      if(now - lastProgressTime > 3_000){
        outContainer?.classList.add("hide")
      }
    }, 2_000);
  }
  hideOutContainer();
</script>
